
\section{Introduction}
\label{sec:introduction}

The AGWS requires the use of 4 guide stars (GS).
AGWS Target Practice (ATP) is an application program interface allowing to model
the sky as viewed by the AGWS.
It also implements the routines to find the most suitable GSs for the AGWS in the different
modes of operation of the telescope.

\section{Installation}
\label{sec:installation}

\section{ATP implementation}
\label{sec:implementation}

The classes and functions used to generate the AGWS field--of--view and to
derive the suitable GSs are gathered in the [[atp.py]] module.
The model parameters are all written in a single yaml file \footnote{\url{yaml.org}}.
A graphical user interface (GUI) written is the module [[main.py]] is used to
visualize the field--of--view and the probes.

The ATP simulator contains 5 main components: the
observation (Section~\ref{sec:observation}), the observatory (Section~\ref{sec:gmt}),
the target (Section~\ref{sec:target}), the star field
(Section~\ref{sec:star-field}) and the 4 AGWS probes (Section \ref{sec:probes}).
A section of the yaml parameter file is dedicated to each component.
Some components are also implemented as a python class.

\subsection{Observation}
\label{sec:observation}

An observation is defined by a date and time (UTC) at which the observation is
supposed to start, the time scale, the duration of the observation and the sampling time of the observation.

<<ATP parameters>>=
Observation:
  time scale: 'UTC'
  time: '2018-01-01T04:00:00'
  time resolution: [60,'second']
  duration: [null,'second']
@ 
\subsection{Observatory}
\label{sec:gmt}

The geodetic45 coordinates of the telescope are set in the parameter file:
<<ATP parameters>>=
Observatory:
  latitude: [-29.049,'degree']
  longitude:  [-70.682,'degree']
  height: [2514,'meter']
@
The [[Observatory]] class is set with the observation parameters and the geodetic coordinates of
the telescope.
<<observatory>>=
class Observatory:
    def __init__(self,**kwargs):
        self.location = EarthLocation(lat=Quantity(*kwargs['latitude']),
                                      lon=Quantity(*kwargs['longitude']),
                                      height=Quantity(*kwargs['height']))
        self.time_scale = kwargs['time scale']
        self.start_time = Time(kwargs['time'])
        self.current_time  = Time(kwargs['time'])
        if self.current_time is None:
            self.current_time = Time(datetime.now())
        self.time_resolution = Quantity(*kwargs['time resolution'])
        print(str(self))

    def __str__(self):
        return "@(Observatory)> Location: "+str(self.location.geodetic)+\
               "\n@(Observatory)> Time: "+str(self.current_time)

    <<observatory method>>
@ %def Observatory 
The [[update]] method accrues the observation time by the time resolution amount:
<<observatory method>>=
def update(self):
    self.current_time += self.time_resolution
@
The telescope alt/az frame of reference is associated to the [[frame]] property.
<<observatory method>>=
@property
def frame(self):
    return AltAz(obstime=self.current_time,
                 location=self.location)
@
The sidereal time is obtained from the [[sidereal_time]] property:
<<observatory method>>=
@property
def sidereal_time(self):
    if self.time_scale=='LST':
        return Angle(self.current_time.value.split('T')[-1],unit='hourangle')
    else:
        return self.current_time.sidereal_time('apparent',self.location.lon)
@
\subsection{Target}
\label{sec:target}

The target object defines the direction the telescope is pointing at.
The target is defined by an [[Observatory]] object and the 3 pointing
coordinates.
The pointing coordinates are either the name of an astronomical object or the sky
coordinates given in either ra/dec or alt/az and the rotator angle.
<<ATP parameters>>=
Target:  
  pointing target: null
  pointing ra/dec: null
  pointing alt/az:
    alt: [45,'degree']
    az: [0,'degree']
  pointing accuracy: null
  rotator angle: [0,'degree']
@
<<target>>=
class Target:
    def __init__(self,obs,**kwargs):
        self.obs = obs
        if kwargs['pointing target'] not in [None,'None']:
            name = kwargs['pointing target']
            try:
                self.icrs  = SkyCoord.from_name(name,frame='icrs')
            except:
                s = name.split(',')
                print(s)
                if len(s)>1:
                    kwargs['pointing ra/dec'] = {'ra':  [float(s[0][1:])  , 'degree'],
                                                 'dec': [float(s[1][:-1]) , 'degree']}
                    kwargs['pointing alt/az'] = None
        elif kwargs['pointing alt/az'] is not None:
            self.altaz = SkyCoord(alt=Quantity(*kwargs['pointing alt/az']['alt']),
                                  az=Quantity(*kwargs['pointing alt/az']['az']),
                                  frame = obs.frame)
            self.icrs  = self.altaz.transform_to( ICRS() )
        if kwargs['pointing ra/dec'] is not None:
            self.icrs  = SkyCoord(ra=Quantity(*kwargs['pointing ra/dec']['ra']),
                                  dec=Quantity(*kwargs['pointing ra/dec']['dec']),
                                  frame='icrs')
        self.rotator_angle = Quantity(*kwargs['rotator angle'])
        self.update(rotator=False)
        print("@(Target)>")
        print(self.icrs)
        print(self.altaz)

    <<target method>>
@ %def Target
The [[update]] method updates the alt/az coordinates of the target along with
the parallactic angle and the rotator angle according to observatory current
time.
<<target method>>=
def update(self,rotator=True):
    self.altaz = self.icrs.transform_to( self.obs.frame )
    H = (self.obs.sidereal_time.to(units.rad) - self.icrs.ra.to(units.rad)).value
    D = self.icrs.dec.to(units.rad).value
    L = self.obs.location.lat.to(units.rad).value
    self.parallactic_angle = Quantity(np.arctan2( np.sin(L)*np.cos(D) - \
                                                  np.cos(L)*np.cos(H)*np.sin(D) ,
                                                  -np.cos(L)*np.sin(H) ) , 'deg')
    if rotator:
        self.rotator_angle += np.cos(self.obs.location.lat)*np.cos(self.altaz.az)/\
                              np.cos(self.altaz.alt)*\
                              self.obs.time_resolution.to('s').value*\
                              Quantity(15,'degree')/3600
@
\subsection{AGWS Star Field}
\label{sec:star-field}

The parameters associated to the star field are the star position error rms, an
excluded region specified by its radius and the V band magnitude limit.
<<ATP parameters>>=
Star Catalog:
  ra/dec error rms: null
  radius: [10,'arcmin']
  exclude radius: [3,'arcmin']
  V magnitude limit: 18
@
The AGWS star field is read from the TESS Input Catalogue (TIC\footnote{\url{https://tess.mit.edu/data/tess-input-catalogue/}}).
A 10 arcmin radius circular region is queried from the catalogue centered on
a given sky coordinate specified by the [[target]] object.
The observation and observatory parameters are passed along with the [[obs]] object.
The data is further reduced to objects that have both a magnitude in V and J bands.
@ 
<<star field>>=
class StarField:
    def __init__(self,obs,target,field=None,**kwargs):
        self.obs = obs
        self.target = target
        self.Vmag_lim = kwargs['V magnitude limit']
        self.exclude_radius = Quantity(*kwargs['exclude radius'])
        if field is None:
            radius = Quantity(*kwargs['radius'])
            print("@(StarField)> Querying TIC ...")
            self.catalogData = Catalogs.query_region(target.icrs, radius=radius,
                                                catalog="TIC",objType="STAR")
            self.apply_constrains()
        else:
            with open(field) as fp:
                data = yaml.load(fp)
            self.icrs = SkyCoord(ra=Quantity(*data['ra']),
                                 dec=Quantity(*data['dec']),
                                 frame='icrs')
            self.V = data['Vmag']
            self.J = data['Jmag']

            self.update(obs)

    <<star field methods>>
@ %def StarField
The data in the catalog is further processed based on a set of criteria that the
stars must fulfilled:
\begin{enumerate}
\item the stars inside the excluded disc are filtered out:
<<star field criteria>>=
if self.exclude_radius is not None:
    uu = self.catalogData['ra']*units.deg - self.target.icrs.ra
    vv = self.catalogData['dec']*units.deg - self.target.icrs.dec
    mask = np.hypot(uu,vv) > self.exclude_radius
    print('@(StarField)> Entries accessible #',mask.sum())
@
\item both V and J magnitude must be available:
<<star field criteria>>= 
Vmag = np.array(self.catalogData['Vmag'])
Jmag = np.array(self.catalogData['Jmag'])
_mask_ = np.logical_and(~np.isnan(Vmag),~np.isnan(Jmag))
mask = np.logical_and(mask,_mask_)
@
\item the stars fainter that the given V band magnitude limit are rejected:
<<star field criteria>>= 
Vmag[np.isnan(Vmag)] = self.Vmag_lim+1
_mask_ = Vmag<=self.Vmag_lim
mask = np.logical_and(mask,_mask_)
@
\end{enumerate}
The selection criteria are enforced with the [[apply_constrains]] method: 
<<star field methods>>=
def apply_constrains(self):
    print('@(StarField)> Catalog entry #',len(self.catalogData))
    <<star field criteria>>
    self.V = Vmag[mask]
    self.J = Jmag[mask]
    data = self.catalogData[mask]
    n = mask.sum()
    print('@(StarField)> Entries with both V and J magnitude #',n)
    if n>0:
        print('@(StarField)> V magnitude range [{0},{1}]'.\
              format(self.V.min(),self.V.max()))
        print('@(StarField)> J magnitude range [{0},{1}]'.\
              format(self.J.min(),self.J.max()))
        self.icrs = SkyCoord(ra=data['ra']*units.deg,
                             dec=data['dec']*units.deg,
                             frame='icrs')
        self.update()
    else:
        print('No stars meet the criteria!')
    return n
@
The alt/az coordinates of the star are transformed in a coordinate system
centered and aligned with respect to the target.
<<star field methods>>=
def update(self,*args):
    self.altaz = self.icrs.transform_to( self.obs.frame )
    cra = np.cos(self.altaz.az.to(units.rad))
    sra = np.sin(self.altaz.az.to(units.rad))
    cdec = np.cos(self.altaz.alt.to(units.rad))
    sdec = np.sin(self.altaz.alt.to(units.rad))
    x = cra*cdec
    y = sra*cdec
    z = sdec
    #print(self.target.rotator_angle)
    R = Rz(self.target.rotator_angle) @ \
           Ry(np.pi/2*units.rad-self.target.altaz.alt.to(units.rad)) @ \
           Rz(self.target.altaz.az.to(units.rad))
    v = np.array(np.vstack([x,y,z]))
    self.local = R @ v
@
The [[update]] method uses rotation matrices to transform the coordinate of the star into
the AGWS \emph{local} coordinate system.
The matrix are defined with the following functions:
<<rotation matrices>>=
def Rz(c):
    return np.array([[np.cos(c),np.sin(c),0],[-np.sin(c),np.cos(c),0],[0,0,1]])
def Ry(b):
    return np.array([[np.cos(b),0,-np.sin(b)],[0,1,0],[np.sin(b),0,np.cos(b)]])
def Rx(a):
    return np.array([[1,0,0],[0,np.cos(a),np.sin(a)],[0,-np.sin(a),np.cos(a)]])
@
The distance from the stars to a given point in the field is computed with:
<<star field methods>>=
def distanceFrom(self,origin=Quantity([[0.0],[0.0]],'arcmin'),
                 star_idx=np.s_[:],u=None):
    dist = np.sqrt(np.sum((self.local[:2,star_idx]-\
                           origin.to(units.rad).value)**2,0))
    if u is not None:
        dist = Quantity(dist,units.rad).to(u)
    return dist
@
\subsection{The probes}
\label{sec:probes}

The AGWS is made of 4 identical probes.
The probes are at $[[rad]]=1360/60$ arcmin away from the center of the field and
90 degree apart from each other ([[az]]).
The range radius of the probe is set with the property [[range_rad]].
The [[local]] property contains the Cartesian coordinates of the probe with
respect to the center of the field. 
% <probe.yaml>>=
% Probe:
%   geometry:
%     x: [0,0]
%     y: [0,0]
%     buffer width: [1.5,'cm']
%   guider:
%     fov: [30,'arcsec']
%   tt7:
%     fov: [5,'arcsec']
@
<<probe>>=
class Probe:
    def __init__(self,az,exclude_rad=Quantity(2,'arcmin')):
        self.rad = Quantity(1360/60,'arcmin')
        self.az  = az
        self.range_rad = self.rad - exclude_rad
        self.local = np.array([[self.rad.to('rad').value*\
                                np.cos(self.az).value],
                               [self.rad.to('rad').value*\
                                np.sin(self.az).value]])
        self.gs_idx = None

    <<probe method>>
@
The method [[reachForTheStars]] identifies the stars that are within the
patrolling range of the probe:
<<probe method>>=
def reachForTheStars(self,stars):
    dist_to_probe = stars.distanceFrom(Quantity(self.local,'rad'))
    self.stars_idx = dist_to_probe<=self.range_rad.to('rad').value
@
\subsection{ATP parameters}
\label{sec:parameters}

<<atp.yaml>>=
<<ATP parameters>>
@
The parameters file is read with:
<<module imports>>=
import yaml
@
<<reading the atp config file>>=
with open(CFG_FILE) as fp:
    cfg = yaml.load(fp)
@ %def cfg

\subsection{ATP python module}
\label{sec:atp-module}

<<module imports>>=
import numpy as np
from astroquery.mast import Catalogs
import astropy.units as units
from astropy.units import Quantity
from astropy.time import Time
from astropy.coordinates import SkyCoord, EarthLocation, ICRS, AltAz, Angle
@
The atp python module is
<<atp.py>>=
<<module imports>>
import ceo  
from datetime import datetime
RAD2MAS = 180*3600e3/np.pi
RAD2ARCSEC = 180*3600/np.pi
ARCMIN2RAD = np.pi/180/60
<<rotation matrices>>
<<photon noise>>
<<read-out noise>>
<<r0 scaling function>>
<<tt7 tip-tilt error>>
<<SH GSs>>
<<observatory>>
<<target>>
<<star field>>
<<probe>>

if __name__ == "__main__":
    CFG_FILE = 'atp.yaml'
    <<atp main>>
@ %def atp.py
with
<<atp main>>=
<<reading the atp config file>>
obs = Observatory(**cfg['Observatory'],**cfg['Observation'])
target = Target(obs,**cfg['Target'])
stars  = StarField(obs,target,**cfg['Star Catalog'])
probes = [Probe(Quantity(k*90,'degree')) for k in range(4)]
for k in range(4):
    probes[k].reachForTheStars(stars)
zen = np.pi/2-target.altaz.alt.to('rad').value
tt_res_rms = [tt7_tt_error(zz,magnitude,zen,**cfg) \
              for zz,magnitude in zip(stars.distanceFrom(u='arcmin').value,stars.V)]
print(tt_res_rms)
tt7_gs_idx = np.argmin(tt_res_rms)
tt7_dist = []
for k in range(4):
    tt7_dist += [stars.distanceFrom(Quantity(probes[k].local,'rad'),star_idx=[tt7_gs_idx],u='arcmin')]
tt7_idx = np.argmin(tt7_dist)
TT7 = probes[tt7_idx]
TT7.gs_idx = tt7_gs_idx
probes.pop(tt7_idx)
SH_GSs(probes,stars,zen,**cfg)

@

\section{Guide star selection}
\label{sec:gs-selection}

\subsection{TT7 guide star}
\label{sec:tt7}

The GS for the TT7 sensor is defined as the GS that minimizes the root sum
square of the tip--tilt anisoplanatism and the detector noise.
<<tt7 tip-tilt error>>=
def tt7_tt_error(zz,magnitude,zenith_distance,**kwargs):
    <<Fried parameter scaling>>
    D = Quantity(*kwargs['Telescope']['diameter']).to('m').value
    L0 = Quantity(*kwargs['Atmosphere']['L0']).to('m').value
    altitude = np.array(Quantity(*kwargs['Atmosphere']['altitude']).to('m').value)
    fr0 = np.array(kwargs['Atmosphere']['fr0'])
    anisop = tilt_anisoplanatism(ARCMIN2RAD*zz,r0,gs_wavelength,L0,D,altitude,fr0)

    seeingArcsec = gs_wavelength/r0
    <<number of photon per lenslet per frame>>
    pn = photon_noise_variance(seeingArcsec,nPhLenslet)
    return np.sqrt(anisop+2*pn)*RAD2MAS
@ %def tt7_tt_error
\subsubsection{Tip--tilt anisoplanatism}
\label{sec:tt-anisop}

The sum of  tip--tilt anisoplanatism variance along the x and y axis is given by:
\begin{eqnarray}
  \label{eq:1}
  \lefteqn{\sigma_\theta^2 = 4\lambda^2r_0^{-5/3}{\pi\Gamma^2(11/6)\over
  2\pi^{11/3}}\left( 24 \Gamma(6/5) \over 5 \right)^{5/6}\times} \\\nonumber
  &&\sum_{l=1}^{N_l} \xi_{0,l} \int_0^\infty \mathrm{d}f f^3\left(f^2 + {1\over\mathcal L_0^2}\right)^{-11/6}G(f,D)\left( 1 - J_0(2\pi\zeta h_l f) \right)
\end{eqnarray}
<<tip-tilt anisoplanatism>>=
def integrandSF(f,theta,r0,wl,L0,D,altitude,fr0):
    f0 = 1.0/L0
    cst = np.pi*gamma(11./6.)**2/(2*np.pi**(11./3.))*(24*gamma(6./5.)/5)**(5./6.)
    cst *= wl**2*r0**(-5.0/3.0)
    sum = 0.0
    for k in range(altitude.size):
        rho = theta*altitude[k]
        red = 2*np.pi*rho*f
        sum += fr0[k]*f**3*(f**2+f0**2)**(-11.0/6.0)*G(f,D)*( 1 - j0(red) )
    return 4*cst*sum
@ %def integrandSF
with
\begin{equation}
  \label{eq:2}
  G(f,D) = \left( 2J_1(\pi Df )\over \pi Df\right)^2.
\end{equation}
<<telescope filter function>>=
def G(_f_,D):
    f = np.array(_f_)
    out = np.ones_like(f)
    idx = f!=0
    red = np.pi*D*f[idx]
    out[idx] = (2*j1(red)/red)**2
    return out
@ %def G
$\lambda$ is the wavelength, $r_0$ is the Fried parameter, $\mathcal L_0$ is the
outer scale, $D$ is the telescope diameter, $\zeta$ is the zenith distance, $N_l$ is the number of atmospheric
layers, $\xi_{0,l}$ is the fractional $r_0$ and $h_l$ is the atmospheric layer
altitude.
<<ATP parameters>>=
Telescope:
  diameter: [25.5,'m']
  area: 367 # m^2
Atmosphere:
  wavelength: [500,'nm']
  r0: [16,'cm']
  L0: [25,'m']
  altitude: [[25, 275, 425, 1250, 4000, 8000, 13000],'m']
  fr0: [0.1257, 0.0874, 0.0666, 0.3498, 0.2273, 0.0681, 0.0751]
@
The Fried parameter is scaled according to the GS wavelength
\begin{equation}
  \label{eq:5}
  r_0(\lambda_{GS}) = r_0(\lambda_{atm})\left( \lambda_{gs}\over\lambda_{atm} \right)^{6/5}
\end{equation}
and to the zenith distance
\begin{equation}
  \label{eq:6}
  r_0^{-5/3}(z) = r_0^{-5/3}(0)\cos^{-1}(z) 
\end{equation}
<<Fried parameter scaling>>=
gs_wavelength = Quantity(*kwargs['TT7']['guide star']['wavelength']).to('m').value
r0_wavelength = Quantity(*kwargs['Atmosphere']['wavelength']).to('m').value
r0 = Quantity(*kwargs['Atmosphere']['r0']).to('m').value#*\
     #(gs_wavelength/r0_wavelength)**1.2
@
<<Fried parameter scaling>>=
#r0 = (r0**(-5./3.)/np.cos(zenith_distance))**(-3./5.)
r0 *= r0_scaling(r0_wavelength,gs_wavelength,zenith_distance)
@
<<r0 scaling function>>=
def r0_scaling(atm_wavelength,gs_wavelength,zenith_distance=0):
    return (gs_wavelength/atm_wavelength)**1.2*np.cos(zenith_distance)**0.6
@ %def r0_scaling
<<tt7 tip-tilt error>>=
from scipy.special import j0, j1, jn, gamma
from scipy.integrate import quad
def tilt_anisoplanatism(zz,r0,wl,L0,D,altitude,fr0):
    <<telescope filter function>>
    <<tip-tilt anisoplanatism>>
    cexy_var,err = quad(integrandSF,0,np.inf,#limit=200,
                 args=(zz,r0,wl,L0,D,altitude,fr0))
    return cexy_var
@ %def tilt_anisoplanatism

\subsubsection{TT7 noise}
\label{sec:tt7-noise}

The TT7 noise is the sum of the photon noise, read-out noise and background
noise that depends of the TT7 guide star, optics, detector and control parameters.
<<ATP parameters>>=
TT7:
  guide star:
    wavelength: [715,'nm']
    zero point: !!float 24.46e9 # ph/m^2/s
  optics:
    lenslet:
      array: 7
      spot size: seeing limited
      pixel scale: null
      pixels: null
    throughput: 0.48
  detector:
    exposure: [5,'ms']
    quantum efficiency: 0.8
    read-out noise: 0
  control:
    gain: 0
    latency: 0
@
The detector noise variance is the sum of
\begin{itemize}
\item the photon noise
\begin{equation}
  \label{eq:3}
  \sigma_{ph}^2 = {\varepsilon^2 \over 2\ln(2)N_{ph}}
\end{equation}
where $\varepsilon$ is the spot FWHM and $N_{ph}$ is the number of photon per
lenset per exposure.
<<photon noise>>=
def photon_noise_variance(fwhm,Nph):
    return 0.5*fwhm**2/Nph/np.log(2)
@ %def photon_noise_variance
The number of photon per lenslet per frame is given by
\begin{equation}
  \label{eq:7}
  N_{ph} = T\omega q {A\over 7} F_0 10^{-0.4 m}
\end{equation}
with $T$ the WFS exposure time, $\omega$ the optics throughput, $q$ the detector
quantum efficiency, $A$ the telescope M$_1$ area, $F_0$ the GS zero point and
$m$ the guide star magnitude.
<<number of photon per lenslet per frame>>=
wfs_photoelectron_gain = kwargs['TT7']['optics']['throughput']*\
                         kwargs['TT7']['detector']['quantum efficiency']
gs_nPhoton = kwargs['TT7']['guide star']['zero point']*10**(-0.4*magnitude)
nPhLenslet = Quantity(*kwargs['TT7']['detector']['exposure']).to('s').value*\
             wfs_photoelectron_gain*gs_nPhoton*kwargs['Telescope']['area']/\
             kwargs['TT7']['optics']['lenslet']['array']
@
\item the read-out and background noise
  \begin{equation}
    \label{eq:4}
    \sigma_{ron}^2 = {p^2 (\sigma_n^2+N_{bg}) \over N_{ph}^2 }{N_s^4\over 12}
  \end{equation}
\end{itemize}
where $p$ is the pixel scale, $\sigma_n$ is the detector read--out noise,
$N_{bg}$ is the number of background photons and
$N_s^2$ is the number of pixel read per lenslet.
<<read-out noise>>=
def readout_noise_variance(ron2,p,Ns2,Nbg=0):
    sig2 = ron2 + Nbg
    return sig2*(p*Ns2/Nph)**2/12
@ %def readout_noise_variance

\subsection{Shack--Hartmann guide stars}
\label{sec:sh-gs}

The SH--WFS parameters are listed below:
<<ATP parameters>>=
SH:
  guide star:
    wavelength: [715,'nm']
    zero point: !!float 24.46e9 # ph/m^2/s
  optics:
    lenslet:
      array: 48
      spot size: seeing limited
      pixel scale: null
      pixels: null
    throughput: 0.48
  detector:
    exposure: [30,'s']
    quantum efficiency: 0.8
    read-out noise: 0
  control:
    gain: 0
    latency: 0
@
The selection of the guide stars is based on the following procedure:
\begin{enumerate}
\item the stars are reduced to the ones only accessible to the SH probes
<<SH guide stars identification>>=
mask0 = probes[0].stars_idx
mask0 = np.logical_or(mask0,probes[1].stars_idx)
mask0 = np.logical_or(mask0,probes[2].stars_idx)
stars_xy = stars.local[:2,mask0]
R = stars.V[mask0]
@
\item the stars within the radii [[min_radius]] arcmin and 10 arcmin are
  selected
<<select annular region>>=
stars_r = np.sqrt(np.sum(stars_xy**2,0))
stars_o = np.arctan2(stars_xy[1,:],stars_xy[0,:])
q = Quantity(stars_r,'rad').to('arcmin')
mask = np.logical_and(q>Quantity(min_radius,'arcmin'),q<=Quantity(10,'arcmin'))
@
\item for each star in the down--selected field, one seeks 2 other stars such as
  their angles with respect to the given star is close to 120 degree and -120
  degree, respectively.
If the 2 stars are perfectly symmetric with respect to the given star, then the
sum of both relative angles
[[az_dist]] is zero.
<<relative azimuth symmetry>>=
lo = 2*np.pi/3
Rmin = []
az_dist = []
q = stars_o[mask]
for c,_q_ in enumerate(q):
    qc = q - _q_
    id2 = [np.argmin(np.abs(qc+lo)),np.argmin(np.abs(qc-lo))]
    az_dist += [np.abs(qc[id2].sum())]
    Rmin += [np.min(R[mask][[c]+id2])]
az_idx = np.argsort(az_dist)
@
\item for the [[nTest]] most symmetric GS triplets, the statistics of
  detector noise propagation in the active optics system is evaluated for [[nSample]]
  samples.
  The final GS triplet is the one with the smallest median wavefront error rms.
<<noise propagation>>=
<<GMT and on-axis source definition>>

gs_wavelength = Quantity(*kwargs['SH']['guide star']['wavelength']).to('m').value
r0_wavelength = Quantity(*kwargs['Atmosphere']['wavelength']).to('m').value
r0 = Quantity(*kwargs['Atmosphere']['r0']).to('m').value
r0 *= r0_scaling(r0_wavelength,gs_wavelength,zenith_distance)
seeingArcsec = gs_wavelength/r0

wfs_photoelectron_gain = kwargs['SH']['optics']['throughput']*\
                 kwargs['SH']['detector']['quantum efficiency']
gs_nPhoton = kwargs['SH']['guide star']['zero point']
nPhLenslet = Quantity(*kwargs['SH']['detector']['exposure']).to('s').value*\
             wfs_photoelectron_gain*gs_nPhoton*\
             (Quantity(*kwargs['Telescope']['diameter']).to('m').value/\
              kwargs['TT7']['optics']['lenslet']['array'])**2

median_wfe_rms = []
for kTest in range(nTest):
    id1 = az_idx[kTest]
    qc = q-q[id1]
    id2 = [np.argmin(np.abs(qc+lo)),np.argmin(np.abs(qc-lo))]
    ids = [id1]+id2

    <<WFS and GS definition>>
    <<interaction matrix>>

    wfe_rms = np.zeros(nSample)
    for k in range(nSample):
        n = np.random.randn(nLenslet**2*2,3)#
        for l in range(3):
            nPhLenslet *= 10**(-0.4*gs.magnitude[l])
            n[:,l] *= np.sqrt(photon_noise_variance(seeingArcsec,nPhLenslet))

        ~gmt
        state = gmt.state
        ~wfs
        +gs
        -wfs
        c = C.dot(wfs.Data + n.reshape(-1,1)).reshape(7,-1)

        state['M1']['Rxyz'] -= c[:,:3]
        state['M1']['Txyz'] -= c[:,3:6]
        state['M2']['Rxyz'] -= c[:,6:9]
        state['M2']['Txyz'] -= c[:,9:12]

        gmt^=state

        +src
        wfe_rms[k] = src.wavefront.rms(-9)

    median_wfe_rms += [np.median(wfe_rms)]
@
<<GMT and on-axis source definition>>=
L=25.5
nPx = 101
nLenslet = 48
gmt = ceo.GMT_MX()
src = ceo.Source(photometric_band="V",
                rays_box_size=L,rays_box_sampling=nPx,rays_origin=[0,0,25])
src>>(gmt,)
zen = np.ones(3)*ceo.constants.ARCMIN2RAD*8
azi = np.arange(3)*2*np.pi/3
gs = ceo.Source(photometric_band="R+I",zenith=zen.tolist(),azimuth=azi.tolist(),
                rays_box_size=L,rays_box_sampling=nPx,rays_origin=[0,0,25])
@
<<WFS and GS definition>>=
wfs = ceo.GeometricShackHartmann(nLenslet,L/nLenslet,3)
zen = stars_r[mask][ids]
azi = stars_o[mask][ids]
gs = ceo.Source(photometric_band="R+I",zenith=zen.tolist(),azimuth=azi.tolist(),
                magnitude=R[mask][ids],
                rays_box_size=L,rays_box_sampling=nPx,rays_origin=[0,0,25])
gs.reset()
gmt.reset()
gmt.propagate(gs)
wfs.calibrate(gs,0.)
gs>>(gmt,wfs)
@
<<interaction matrix>>=
C = gmt.AGWS_calibrate(wfs,gs,decoupled=True,fluxThreshold=0.5,includeBM=False,
                       filterMirrorRotation=True,
                       calibrationVaultKwargs={'n_threshold':[2]*6+[0],
                                               'insert_zeros':[None]*6 + [[5,10]]})
@
\item each GS is paired with the closest probe
<<probe/GS pairing>>=
w = np.argsort(median_wfe_rms)[0]
id1 = az_idx[w]
qc = q-q[id1]
id2 = [np.argmin(np.abs(qc+lo)),np.argmin(np.abs(qc-lo))]
ids = [id1]+id2
print(stars_r[mask][ids],stars_o[mask][ids],R[mask][ids])
for uid in np.where(mask0)[0][mask][ids]:
    probe_id = np.argmin([stars.distanceFrom(Quantity(probe.local,'rad'),
                                             star_idx=[uid],u='arcmin') \
                          for probe in probes])
    probes[probe_id].gs_idx = uid
@
\end{enumerate}

<<SH GSs>>=
def SH_GSs(probes,stars,zenith_distance,min_radius=6,
           nTest=10,nSample=10,**kwargs):
    print('SH GSs...')
    <<SH guide stars identification>>
    <<select annular region>>
    <<relative azimuth symmetry>>
    <<noise propagation>>
    <<probe/GS pairing>>
@
\section{Display}
\label{sec:display}

Lets build the model:
<<model>>=
class Model:
    def __init__(self):
        self.obs = None
        self.target = None
        self.stars = None
        self.TT7 = None
        self.probes = [Probe(Quantity(k*90,'degree')) for k in range(4)]
@
and the data sources for the graphics
<<sources>>=
class CDS:
    def __init__(self):
        self.stars = ColumnDataSource(data=dict(x=[],y=[],
                                                Vmag=[],c=[],Jmag=[]))
        self.probes = {'mirror':[],'stage':[]}
        for k in range(4):
            self.probes['mirror'] += [ColumnDataSource(data=dict(tx=[],ty=[],lc=[]))]
            self.probes['stage']  += [ColumnDataSource(data=dict(px=[],py=[]))]
@
<<main.py>>=
from bokeh.io import curdoc
from bokeh.plotting import figure, show, output_file
from bokeh.models import ColorBar, LinearColorMapper, BasicTicker, \
    ColumnDataSource, PrintfTickFormatter, HoverTool
from bokeh.palettes import Plasma11, Spectral4
from bokeh.layouts import widgetbox, row, column, layout
from bokeh.models.widgets import Button, Slider, Select, Panel, \
    Tabs, CheckboxGroup, TextInput, Div, Toggle
import numpy as np
import yaml
from astropy.units import Quantity
from atp import Observatory, Target, StarField, Probe, tt7_tt_error, SH_GSs

<<model>>
<<sources>>

CFG_FILE = __file__.replace('main.py','atp.yaml')
<<reading the atp config file>>

r2a = 180*60/np.pi
mdl = Model()
cds = CDS()

doc = curdoc()

<<widgets>>

p = figure(title='AGWS',x_range=[-25,25],y_range=[-25,25],
           tools="pan,wheel_zoom,box_zoom,reset")
for k in range(4):
    p.line(x='px',y='py',source=cds.probes['stage'][k],
           line_width=3,color='navy')
    p.circle(x='tx',y='ty',line_color='lc',source=cds.probes['mirror'][k],
             radius=0.5,fill_color=None,line_width=2)
    p.wedge(r2a*mdl.probes[k].local[0,0],r2a*mdl.probes[k].local[1,0],radius=21,
            start_angle=(k*90+180-26.35)*np.pi/180,
            end_angle=(k*90+180+26.35)*np.pi/180,
            color='navy',alpha=0.05)
    p.circle(r2a*mdl.probes[k].local[0,0],r2a*mdl.probes[k].local[1,0],
             size=15,color='navy')
p.circle(x='x',y='y',color='c',size=5,source=cds.stars,
         alpha=0.75,name='stars')
p.circle(0,0,radius=3,fill_color=None,line_color='red',line_dash='dashed')
p.circle(0,0,radius=10,fill_color=None,line_color='red',line_dash='dashed')
p.xaxis.axis_label = "[arcmin]"
p.yaxis.axis_label = "[arcmin]"
p.add_tools(HoverTool(names=['stars'],tooltips=[("V", "@Vmag"),("J", "@Jmag")]))

doc.add_root(row(widgetbox([datetime,
                            target_name,tel_alt,tel_az,
                            query,V_lim,find_tt7,
                            time_res,startstop,rotator]),p))
#update()
@

\subsection{Widgets}
\label{sec:widgets}

\begin{itemize}
\item start and stop the time:
<<widgets>>=
startstop = Toggle(label="Start/Stop Time", button_type="default" ,active=False)
def update():
    source = cds.stars
    probes = [mdl.TT7] + mdl.probes
    mdl.obs.update()
    mdl.target.update(rotator=rotator.active)
    mdl.stars.update()
    x = r2a*mdl.stars.local[0,:]
    y = r2a*mdl.stars.local[1,:]
    source.data.update(dict(x=x,y=y))
    p.title.text = "AGWS - "+str(mdl.obs.current_time)+\
                   ' - Alt: '+str(mdl.target.altaz.alt)+\
                   ',Az: '+str(mdl.target.altaz.az)
    for probe,mirror,stage in zip(probes,cds.probes['mirror'],cds.probes['stage']):
        """
        p.line([r2a*probe.local[0,0],r2a*mdl.stars.local[0,probe.gs_idx]],
               [r2a*probe.local[1,0],r2a*mdl.stars.local[1,probe.gs_idx]],
               line_width=5,color='navy')
        p.circle(r2a*mdl.stars.local[0,probe.gs_idx],r2a*mdl.stars.local[1,probe.gs_idx],
                 size=10,fill_color=None,line_color='DarkSeaGreen',line_width=3)
        """
        src = ColumnDataSource(data=dict(tx=[r2a*mdl.stars.local[0,probe.gs_idx]],
                                         ty=[r2a*mdl.stars.local[1,probe.gs_idx]],
                                         lc=['DarkSeaGreen']))
        data = dict(tx=[r2a*mdl.stars.local[0,probe.gs_idx]],
                    ty=[r2a*mdl.stars.local[1,probe.gs_idx]])
        mirror.data.update(data)
        data = dict(px=[r2a*probe.local[0,0],r2a*mdl.stars.local[0,probe.gs_idx]],
                    py=[r2a*probe.local[1,0],r2a*mdl.stars.local[1,probe.gs_idx]])
        stage.data.update(data)

        

widget_data = {'startstop':None}
callback_id = None
def cb_startstop(attrname, old, new):
    global callback_id
    print(attrname, old, new)
    if new:
        print('Add callback')
        callback_id = doc.add_periodic_callback(update,1000)
    else:
        print('Remove callback')
        doc.remove_periodic_callback(callback_id)
startstop.on_change('active',cb_startstop)
@ 
\item the date and time (UTC)
<<widgets>>=
datetime = TextInput(value="2018-01-01T04:00:00.000", title="Date and time (UTC)")
@
\item the time resolution
<<widgets>>=
time_res = TextInput(value="60", title="Time resolution [s]")
@
\item the target name
<<widgets>>=
target_name = TextInput(value="None", title="Target name or coordinates (ra,dec)")
@
\item the telescope pointing direction (alt/az)
<<widgets>>=
tel_alt = TextInput(value="45", title="Telescope altitude [degree]")
tel_az = TextInput(value="0", title="Telescope azimuth [degree]")
@
\item queries star
<<widgets>>=
query = Button(label="Query field", button_type="default")
def cb_query():
    mdl.obs = Observatory(**{'time':datetime.value,
                             'time scale':'UTC',
                             'time resolution':[float(time_res.value),'second']},
                          **cfg['Observatory'])
    mdl.target = Target(mdl.obs,**{'pointing target':target_name.value,
                                   'pointing ra/dec':None,
                                   'pointing alt/az':{'alt':[float(tel_alt.value),'degree'],
                                                      'az':[float(tel_az.value),'degree']},
                                   'rotator angle':[0,'degree']})
    if target_name.value is 'None':
        target_name.value = '({0:.2f},{1:.2f})'.format(mdl.target.icrs.ra.value,
                                               mdl.target.icrs.dec.value)
    mdl.probes = [Probe(Quantity(k*90,'degree')) for k in range(4)]
    tel_alt.value = "%.2f"%mdl.target.altaz.alt.value
    tel_az.value = "%.2f"%mdl.target.altaz.az.value
    mdl.stars  = StarField(mdl.obs,mdl.target,
                           **{'V magnitude limit':18,
                              'exclude radius':[3,'arcmin']})
    Vmag = mdl.stars.V#[idx]
    Jmag = mdl.stars.J#[idx]
    q = np.rint((Vmag - Vmag.min())/(Vmag.max()-Vmag.min())*10)
    c = [Plasma11[int(x)] for x in q]
    src = ColumnDataSource(data=dict(x=r2a*mdl.stars.local[0,:],
                                     y=r2a*mdl.stars.local[1,:],
                                     Vmag=Vmag,c=c,Jmag=Jmag))
    cds.stars.data.update(src.data)
    p.title.text = "AGWS - "+str(mdl.obs.current_time)+\
                   ' - Alt: '+str(mdl.target.altaz.alt)+\
                   ',Az: '+str(mdl.target.altaz.az)
    V_lim.start = np.floor(mdl.stars.V.min())
    V_lim.end   = np.ceil(mdl.stars.V.max())
    V_lim.value = mdl.stars.Vmag_lim

query.on_click(cb_query)
@
\item find the guide stars
<<widgets>>=
find_tt7 = Button(label="Find GSs", button_type="default")
def cb_find_tt7():
    for k in range(4):
        mdl.probes[k].reachForTheStars(mdl.stars)
    zen = np.pi/2-mdl.target.altaz.alt.to('rad').value
    tt_res_rms = [tt7_tt_error(zz,magnitude,zen,**cfg) \
                  for zz,magnitude in zip(mdl.stars.distanceFrom(u='arcmin').value,mdl.stars.V)]
    print(tt_res_rms)
    tt7_gs_idx = np.argmin(tt_res_rms)
    tt7_dist = []
    for k in range(4):
        tt7_dist += [mdl.stars.distanceFrom(Quantity(mdl.probes[k].local,'rad'),star_idx=[tt7_gs_idx],u='arcmin')]
    tt7_idx = np.argmin(tt7_dist)
    mdl.TT7 = mdl.probes[tt7_idx]
    mdl.TT7.gs_idx = tt7_gs_idx
    mdl.probes.pop(tt7_idx)
    """
    p.line([r2a*mdl.TT7.local[0,0],r2a*mdl.stars.local[0,mdl.TT7.gs_idx]],
           [r2a*mdl.TT7.local[1,0],r2a*mdl.stars.local[1,mdl.TT7.gs_idx]],
           line_width=5,color='navy')
    p.circle(r2a*mdl.stars.local[0,mdl.TT7.gs_idx],r2a*mdl.stars.local[1,mdl.TT7.gs_idx],
             size=10,fill_color=None,line_color='FireBrick',line_width=3)
    """
    SH_GSs(mdl.probes,mdl.stars,zen,**cfg)

    probes = [mdl.TT7]+mdl.probes
    for probe,mirror,stage,c in zip(probes,
                                    cds.probes['mirror'],
                                    cds.probes['stage'],
                                    ['FireBrick']+['DarkSeaGreen']*3):
        """
        p.line([r2a*probe.local[0,0],r2a*mdl.stars.local[0,probe.gs_idx]],
               [r2a*probe.local[1,0],r2a*mdl.stars.local[1,probe.gs_idx]],
               line_width=5,color='navy')
        p.circle(r2a*mdl.stars.local[0,probe.gs_idx],r2a*mdl.stars.local[1,probe.gs_idx],
                 size=10,fill_color=None,line_color='DarkSeaGreen',line_width=3)
        """
        src = ColumnDataSource(data=dict(tx=[r2a*mdl.stars.local[0,probe.gs_idx]],
                                         ty=[r2a*mdl.stars.local[1,probe.gs_idx]],
                                         lc=[c]))
        mirror.data.update(src.data)
        src = ColumnDataSource(data=dict(px=[r2a*probe.local[0,0],r2a*mdl.stars.local[0,probe.gs_idx]],
                                         py=[r2a*probe.local[1,0],r2a*mdl.stars.local[1,probe.gs_idx]]))
        stage.data.update(src.data)
find_tt7.on_click(cb_find_tt7)
@
\item the GIR
<<widgets>>=
rotator = Toggle(label="Rotator On/Off", button_type="default" ,active=False)
@
\item V magnitude limit
<<widgets>>=
V_lim = Slider(start=0,end=18,value=18,step=1,title='V magnitude limit')
def  cb_V_lim(attrname, old, new):
    mdl.stars.Vmag_lim = new
    mdl.stars.apply_constrains()
    #for k in range(4):
    #    mdl.probes[k].reachForTheStars(mdl.stars)
    Vmag = mdl.stars.V#[idx]
    Jmag = mdl.stars.J#[idx]
    q = np.rint((Vmag - Vmag.min())/(Vmag.max()-Vmag.min())*10)
    c = [Plasma11[int(x)] for x in q]
    src = ColumnDataSource(data=dict(x=r2a*mdl.stars.local[0,:],
                                     y=r2a*mdl.stars.local[1,:],
                                     Vmag=Vmag,c=c,Jmag=Jmag))
    cds.stars.data.update(src.data)
V_lim.on_change('value',cb_V_lim)
@
\end{itemize}
    


